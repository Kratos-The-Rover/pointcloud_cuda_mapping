
#include <pluginlib/class_list_macros.h>
#include <pluginlib/class_list_macros.hpp>
#include <pointcloud_cuda_mapping/pointcloud_nodelet.h>
#include <pointcloud_cuda_mapping/pointcloud_cuda.cuh>
#include <tf2_eigen/tf2_eigen.h>
#include <sensor_msgs/PointCloud2.h>
#include <grid_map_msgs/GridMap.h>
namespace pointcloud
{


    * * Initialization
    * todo: ADD GridMap Initializations
    * todo: Add GridMap Publisher

    
    PointcloudProcessor::PointcloudProcessor(){}
    void PointcloudProcessor::onInit(){

        //* get node handles
        private_nh=getPrivateNodeHandle();
        nh=getMTNodeHandle();
        
        //* get params
        private_nh.param<int>("concurrency_lvl",concurrency_lvl,1);
        private_nh.param<bool>("concurrent_callbacks",concurrent_callback,0);
        private_nh.param<double>("transform_tolerence",transform_tolerance,0.05);
        private_nh.param<std::string>("target_frame",target_frame,"odom");
        
        //* init tf stuff
        frame_buffer.reset(new tf2_ros::Buffer());
        frame_listener.reset(new tf2_ros::TransformListener(*frame_buffer));


        //* init subsciber
        cloud_sub_opts.reset(new ros::SubscribeOptions());
        cloud_sub_opts->allow_concurrent_callbacks=concurrent_callback;
        cloud_sub_opts->initByFullCallbackType<const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr&>("cloud_in",concurrency_lvl,boost::bind(&PointcloudProcessor::cloud_sub_callback,this,_1));
        cloud_sub.reset(new ros::Subscriber());
        (*cloud_sub)=nh.subscribe((*cloud_sub_opts));


        //* cloud_pub.reset(new ros::Publisher); 
        cloud_pub=nh.advertise<pcl::PointCloud<pcl::PointXYZRGB>>("/clouder",10);

        //* init cuBLAS
        cublasCreate(&(this->h));
    }


    * * Subscriber Callback
    * todo: ADD GridMap Publishing

     
    void PointcloudProcessor::cloud_sub_callback(const pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr& cloud_msg){
	try
        {
            NODELET_INFO_STREAM("GOT A POINTCLOUD.");

            //* Allocating GPU Pointcloud
            if(!cloud_allocated){
                NODELET_INFO_STREAM("FIRST GPU POINTCLOUD ALLOCATION");
                dev_cloud_ptr.reset(new CudaPointCloud(cloud_msg,&h));
                cloud_allocated=true;
            }else {
                NODELET_INFO_STREAM("GPU POINTCLOUD ALLOCATION");
                dev_cloud_ptr->re_allocate_cloud(cloud_msg);
            }

            //* Benchmarking Time tool
            ros::Time begin=ros::Time::now();
            
            
            //*Looking up for broadcasted transform
            curr_transform=frame_buffer->lookupTransform(target_frame,cloud_msg->header.frame_id,ros::Time::now()-ros::Duration(0.06));\

            
            //* Transforming Transforms int SO(3) Matrices
            Eigen::MatrixXf tf_mat=((Eigen::MatrixXd)tf2::transformToEigen(curr_transform).matrix()).cast<float>();
            tf_mat.resize(1,16);
            float* tf_mat_ptr=tf_mat.data();

            //* Allocating the Matrix on GPU
            dev_cloud_ptr->add_mat(tf_mat_ptr);
            float* a;

            //* Call GPU Transform
            dev_cloud_ptr->transform_cloud(&(this->h));


            //* Publish Transform
            pcl::PointCloud<pcl::PointXYZRGB>::Ptr publish_msg=get_pcl_cloud(dev_cloud_ptr);
            this->cloud_pub.publish(publish_msg);


            NODELET_INFO_STREAM("CALLBACK FREQUENCY: "<<1/(ros::Time::now()-begin).toSec());

            }
            catch(tf2::TransformException& e)
            {
                NODELET_ERROR_STREAM("ERROR: "<<e.what());
            }
    
    
    }

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
    * * Get PointCloud Back From GPU (Made as a Library function)
    * todo: ADD GridMap Publishing

  
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr PointcloudProcessor::get_pcl_cloud(std::shared_ptr <CudaPointCloud> dev_cloud_ptr){
        pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_msg;
        cloud_msg.reset(new pcl::PointCloud<pcl::PointXYZRGB>());
        cloud_msg->header.frame_id="odom";
        cloud_msg->header.stamp=ros::Time::now().toNSec();
        cloud_msg->height=1;
        cloud_msg->width=dev_cloud_ptr->get_cloud_size();
        cloud_msg->reserve(dev_cloud_ptr->get_cloud_size());
        dev_cloud_ptr->get_pcl_cloud(cloud_msg);
        return cloud_msg;
    }
    
} // namespace 
PLUGINLIB_EXPORT_CLASS(pointcloud::PointcloudProcessor, nodelet::Nodelet)
