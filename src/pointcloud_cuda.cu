
    * * GPU PointCloud Class Imlementation File
    * todo: ADD GPU MAPPING


#include <pointcloud_cuda_mapping/pointcloud_cuda.cuh>
#include <iostream>
#include <cuda_runtime.h>
#include <device_launch_parameters.h>
#include <ros/ros.h>
#include <pcl/point_representation.h>
#include <pcl/impl/point_types.hpp>
#include <nodelet/nodelet.h>
#include <pointcloud_cuda_mapping/grid_map_gpu.cuh>
typedef pcl::PointCloud<pcl::PointXYZRGB> PointCloud;




/******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
    * * PointCloud Initialization

CudaPointCloud::CudaPointCloud(const PointCloud::ConstPtr& cloud_ptr,cublasHandle_t* cub_handle_pt){
    num_cloud_dims=4;
    cloud_header=cloud_ptr->header;
    cudaMallocManaged(&cloud,4*cloud_ptr->points.size()*sizeof(float));
    cudaMallocManaged(&(this->transformed_cloud),4*cloud_ptr->points.size()*sizeof(float));
    cudaMallocManaged(&(this->rgb),4*cloud_ptr->points.size()*sizeof(float));
    cloud=mount_filtered_cloud(cloud_ptr,cloud);
    cub_handle_ptr=cub_handle_pt;

}

// cublasSgemm


    * * Copying Cloud

void CudaPointCloud::re_allocate_cloud(const PointCloud::ConstPtr& cloud_ptr){
    std::cout<<"REALLOCATION ONGOING"<<std::endl;
	mount_filtered_cloud(cloud_ptr,this->cloud);
}

float* CudaPointCloud::mount_filtered_cloud(const PointCloud::ConstPtr& cloud_ptr,float* cuda_cloud_mat){
    this->cloud_size=0;
    for (int i = 0; i < cloud_ptr->points.size(); i++)
    {
        pcl::PointXYZRGB point=cloud_ptr->points[i];
        if(! std::isnan(point.z) && !std::isinf(point.z)){
            float* data=(float*)point.data;
	        data[3]=1;
            memcpy(cuda_cloud_mat+(4*this->cloud_size),data,4*sizeof(float));
            this->rgb[(4*this->cloud_size)]=point.rgb;
        if(this->cloud_size==0)
        {

        }
            this->cloud_size++;

        }

    }
    return cuda_cloud_mat;
}





    * * Copying Matrix

float* CudaPointCloud::add_mat(float* mat){
    cudaMallocManaged(&(this->tf_mat),16*sizeof(float));
    memcpy(this->tf_mat,mat,16*sizeof(float));  
}

float* CudaPointCloud::transform_cloud(float* arg_cloud,float* transform_mat){
    float alpha=1;
    float beta=0;
    //cublasStatus_t e=cublasSgemmStridedBatched(*(this->cub_handle_ptr),CUBLAS_OP_N, CUBLAS_OP_N, 4,this->cloud_size,4 , &alpha, transform_mat, 4, 4,this->cloud, 4, 4,&beta,this->cloud, 4,4,1);
    cublasStatus_t e=cublasSgemm(*(this->cub_handle_ptr),CUBLAS_OP_N, CUBLAS_OP_N, 4,this->cloud_size,4 , &alpha, transform_mat, 4, this->cloud, 4, &beta,this->cloud, 4);
    
    switch (e)
    {
    case CUBLAS_STATUS_SUCCESS:
        std::cout<<"MATMUL_SUCCESS"<<std::endl;
        break;
    case CUBLAS_STATUS_NOT_INITIALIZED:
        std::cerr<<"CUBLAS_NOT_INITIALIZED"<<std::endl;
        break;
     case CUBLAS_STATUS_INVALID_VALUE:
        std::cerr<<"INVALID_VALUE"<<std::endl;
        break;
     case CUBLAS_STATUS_EXECUTION_FAILED:
        std::cerr<<"EXECUTION_FAILED"<<std::endl;
        break;
    default:
        break;
    }
}

float* CudaPointCloud::transform_cloud(cublasHandle_t* cub_handle_pt){
    float alpha=1;
    float beta=0;
    //cublasStatus_t e=cublasSgemmStridedBatched(*(this->cub_handle_ptr),CUBLAS_OP_N, CUBLAS_OP_N, 4,this->cloud_size,4 , &alpha, this->tf_mat, 4, 4,this->cloud, 4, 4,&beta,this->cloud, 4,4,1);

    cublasStatus_t e=cublasSgemm(*(cub_handle_pt),CUBLAS_OP_N, CUBLAS_OP_N, 4,this->cloud_size,4 , &alpha, this->tf_mat, 4, this->cloud, 4, &beta,this->transformed_cloud, 4);
    switch (e)
    {
    case CUBLAS_STATUS_SUCCESS:
        std::cout<<"MATMUL_SUCCESS"<<std::endl;
        break;
    case CUBLAS_STATUS_NOT_INITIALIZED:
        std::cerr<<"NOT_INITIALIZED"<<std::endl;
        break;
     case CUBLAS_STATUS_INVALID_VALUE:
        std::cerr<<"INVALID_VALUE"<<std::endl;
        break;
     case CUBLAS_STATUS_EXECUTION_FAILED:
        std::cerr<<"EXECUTION_FAILED"<<std::endl;
        break;
    default:
        break;
    }

    cudaFree(this->cloud);
    this->cloud=this->transformed_cloud;
}

CudaPointCloud::~CudaPointCloud(){
    std::cout<<"FREEING GPU MEMORY"<<std::endl;
    cudaFree(cloud);
    cudaFree(tf_mat);
    cudaFree(transformed_cloud);
}

void CudaPointCloud::get_pcl_cloud( pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_msg){

    for(int i=0;i<this->cloud_size;i++){
        pcl::PointXYZRGB point;
        float* data=(float*)point.data;
        memcpy(data,this->transformed_cloud+(4*i),4*sizeof(float));
        point.rgb=this->rgb[4*i];
        cloud_msg->points.push_back(point);
        
        }
    // (*cloud_msg).resize(this->cloud_size);
}

int CudaPointCloud::get_cloud_size(){
    return this->cloud_size;
};

__global__ void makeMapFromCloud(CudaPointCloud cloud,  GPU_GridMap grid_map){
    
}
